openapi: 3.1.1
info:
  title: MyPetCare API
  description: |-
    MyPetCare es una aplicación diseñada para optimizar la gestión de procesos en clínicas veterinarias y mejorar la interacción entre veterinarios y propietarios de mascotas. La plataforma incluye funcionalidades como administración de usuarios, gestión de mascotas, agendamiento de citas, generación de informes, envío de notificaciones, integración con mapas y más.

    _La API está documentada mediante Swagger para facilitar la integración con otros sistemas y el desarrollo de nuevas funcionalidades._
  license:
    name: MIT License
    url: https://github.com/GabrielJuan349/MyPetCare/blob/master/LICENSE.md
  version: 1.0.0
servers:
  - url: https://api.mypetcare.com/v1
  - url: https://localhost:8080
tags:
  - name: Auth
    description: Registro y autenticación de usuarios
  - name: User
    description: Operaciones relacionadas con usuarios
  - name: Pet
    description: Operaciones relacionadas con mascotas
  - name: Appointment
    description: Operaciones relacionadas con citas
  - name: Blocked
    description: Operaciones relacionadas con horarios bloqueados
  - name: Clinic
    description: Operaciones relacionadas con clínicas veterinarias
  - name: Vet
    description: Operaciones relacionadas con veterinarios
paths:
  /register:
    post:
      tags:
        - Auth
      summary: Registro de usuarios
      description: Registra un nuevo usuario en el sistema (clínica, veterinario o dueño de mascotas)
      operationId: registerUser
      requestBody:
        description: Datos para el registro de usuario
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '200':
          description: Usuario registrado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'
        '400':
          description: Error en los datos enviados
        '502':
          description: Error interno del servidor

  /authenticate:
    post:
      tags:
        - Auth
      summary: Autenticación de usuarios
      description: Autentica a un usuario y devuelve su información junto con el token de acceso
      operationId: authenticateUser
      requestBody:
        description: Credenciales de usuario
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
      responses:
        '200':
          description: Autenticación exitosa
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '404':
          description: Usuario no encontrado o credenciales inválidas
  /register_auth:
    post:
      tags:
        - Auth
      summary:
      description:
      operationId: registerAuth
      responses:
        '200':
          description: El token es correcto
        '401':
          description: El token es incorrecto

  /user:
    post:
      tags:
        - User
      summary: Obtener información de usuario
      description: Obtiene información detallada de un usuario específico
      operationId: getUserInfo
      responses:
        '200':
          description: Información del usuario obtenida exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
        '404':
          description: Usuario no encontrado
      security:
        - bearerAuth: []

    put:
      tags:
        - User
      summary: Actualizar información de usuario
      description: Actualiza los datos de un usuario específico
      operationId: updateUserInfo
      requestBody:
        description: Datos a actualizar del usuario
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateRequest'
      responses:
        '200':
          description: Información del usuario actualizada exitosamente
        '400':
          description: Error en los datos enviados
        '404':
          description: Usuario no encontrado
      security:
        - bearerAuth: []

    delete:
      tags:
        - User
      summary: Eliminar usuario
      description: Elimina un usuario del sistema
      operationId: deleteUser
      responses:
        '200':
          description: Usuario eliminado exitosamente
        '400':
          description: Error en la solicitud
        '404':
          description: Usuario no encontrado
      security:
        - bearerAuth: []

  /getPets:
    post:
      tags:
        - Pet
      summary: Obtener lista de mascotas
      description: Obtiene una lista de mascotas asociadas al usuario autenticado
      operationId: getPetsList
      responses:
        '200':
          description: Lista de mascotas obtenida exitosamente
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PetInfo'
        '404':
          description: No se encontraron mascotas
      security:
        - bearerAuth: []

  /pet/{id}:
    post:
      tags:
        - Pet
      summary: Obtener información de mascota
      description: Obtiene información detallada de una mascota específica
      operationId: getPetInfo
      parameters:
        - name: id
          in: path
          description: ID de la mascota
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Información de la mascota obtenida exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PetInfo'
        '404':
          description: Mascota no encontrada
      security:
        - bearerAuth: []

    put:
      tags:
        - Pet
      summary: Actualizar información de mascota
      description: Actualiza los datos de una mascota específica
      operationId: updatePetInfo
      parameters:
        - name: id
          in: path
          description: ID de la mascota
          required: true
          schema:
            type: string
      requestBody:
        description: Datos a actualizar de la mascota
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PetUpdateRequest'
      responses:
        '200':
          description: Información de la mascota actualizada exitosamente
        '400':
          description: Error en los datos enviados
        '404':
          description: Mascota no encontrada
      security:
        - bearerAuth: []

    delete:
      tags:
        - Pet
      summary: Eliminar mascota
      description: Elimina una mascota del sistema
      operationId: deletePet
      parameters:
        - name: id
          in: path
          description: ID de la mascota
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Mascota eliminada exitosamente
        '400':
          description: Error en la solicitud
        '404':
          description: Mascota no encontrada
      security:
        - bearerAuth: []

  /citaList:
    post:
      tags:
        - Appointment
      summary: Obtener lista de citas
      description: Obtiene una lista de citas asociadas al usuario autenticado
      operationId: getAppointmentsList
      responses:
        '200':
          description: Lista de citas obtenida exitosamente
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AppointmentInfo'
        '404':
          description: No se encontraron citas
      security:
        - bearerAuth: []

  /cita/{id}:
    post:
      tags:
        - Appointment
      summary: Obtener información de cita
      description: Obtiene información detallada de una cita específica
      operationId: getAppointmentInfo
      parameters:
        - name: id
          in: path
          description: ID de la cita
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Información de la cita obtenida exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppointmentInfo'
        '404':
          description: Cita no encontrada
      security:
        - bearerAuth: []

    put:
      tags:
        - Appointment
      summary: Actualizar información de cita
      description: Actualiza los datos de una cita específica (solo hora y día)
      operationId: updateAppointmentInfo
      parameters:
        - name: id
          in: path
          description: ID de la cita
          required: true
          schema:
            type: string
      requestBody:
        description: Datos a actualizar de la cita
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppointmentUpdateRequest'
      responses:
        '200':
          description: Información de la cita actualizada exitosamente
        '400':
          description: Error en los datos enviados
        '404':
          description: Cita no encontrada
      security:
        - bearerAuth: []

    delete:
      tags:
        - Appointment
      summary: Eliminar cita
      description: Elimina una cita del sistema
      operationId: deleteAppointment
      parameters:
        - name: id
          in: path
          description: ID de la cita
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Cita eliminada exitosamente
        '400':
          description: Error en la solicitud
        '404':
          description: Cita no encontrada
      security:
        - bearerAuth: []

  /blocked/{date}/{id}:
    post:
      tags:
        - Blocked
      summary: Bloquear mes
      description: Bloquea un mes específico en el calendario del veterinario
      operationId: blockMonth
      parameters:
        - name: id
          in: path
          description: ID del veterinario
          required: true
          schema:
            type: string
        - name: date
          in: path
          description: Tipo de bloqueo
          required: true
          schema:
            type: string
            enum: [day, month]
      requestBody:
        description: Información del mes a bloquear
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlockRequest'
      responses:
        '210':
          description: Dia bloqueado exitosamente
        '211':
          description: Informacion del mes extraida
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/'
        '400':
          description: Error en los datos enviados
        '404':
          description: Veterinario no encontrado
      security:
        - bearerAuth: []

  /clinic/list:
    post:
      tags:
        - Clinic
      summary: Obtener lista de clínicas
      description: Obtiene una lista de clínicas veterinarias
      operationId: getClinicsList
      responses:
        '200':
          description: Lista de clínicas obtenida exitosamente
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ClinicInfo'
        '404':
          description: No se encontraron clínicas
      security:
        - bearerAuth: []

  /clinic/{id}:
    post:
      tags:
        - Clinic
      summary: Obtener información de clínica
      description: Obtiene información detallada de una clínica específica
      operationId: getClinicInfo
      parameters:
        - name: id
          in: path
          description: ID de la clínica
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Información de la clínica obtenida exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClinicInfo'
        '404':
          description: Clínica no encontrada
      security:
        - bearerAuth: []

  /category/{id}:
    post:
      tags:
        - Clinic
      summary: Obtener categorías de clínica
      description: Obtiene las categorías asociadas a una clínica específica
      operationId: getClinicCategories
      parameters:
        - name: id
          in: path
          description: ID de la clínica
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Categorías de la clínica obtenidas exitosamente
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CategoryInfo'
        '404':
          description: Clínica no encontrada
      security:
        - bearerAuth: []

  /vet/list/{id_clinica}:
    post:
      tags:
        - Vet
      summary: Obtener lista de veterinarios de una clínica
      description: Obtiene una lista de veterinarios asociados a una clínica específica
      operationId: getVetsList
      parameters:
        - name: id_clinica
          in: path
          description: ID de la clínica
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Lista de veterinarios obtenida exitosamente
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VetInfo'
        '404':
          description: No se encontraron veterinarios o clínica no encontrada
      security:
        - bearerAuth: []

components:
  schemas:
    RegisterRequest:
      type: object
      required:
        - email
        - password
        - accountType
      properties:
        email:
          type: string
          format: email
          example: user@example.com
        password:
          type: string
          format: password
          example: 'Password123'
        accountType:
          type: string
          enum: [clinic, vet, owner]
          example: owner
        firstName:
          type: string
          example: Juan
        lastName:
          type: string
          example: Pérez
        phone:
          type: string
          example: '+34612345678'
        clinicInfo:
          $ref: '#/components/schemas/ClinicRegistrationInfo'

    ClinicRegistrationInfo:
      type: object
      properties:
        name:
          type: string
          example: 'Clínica Veterinaria San Martín'
        address:
          type: string
          example: 'Calle Mayor 123, Madrid'
        phone:
          type: string
          example: '+34912345678'
        email:
          type: string
          format: email
          example: 'info@clinicavetmadrid.com'
        website:
          type: string
          format: uri
          example: 'https://www.clinicavetmadrid.com'

    RegisterResponse:
      type: object
      properties:
        token:
          type: string
          example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'
        accountType:
          type: string
          enum: [clinic, vet, owner]
          example: owner
        userId:
          type: string
          example: 'user123'

    AuthRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: user@example.com
        password:
          type: string
          format: password
          example: 'Password123'

    AuthResponse:
      type: object
      properties:
        token:
          type: string
          example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'
        accountType:
          type: string
          enum: [clinic, vet, owner]
          example: owner
        userInfo:
          $ref: '#/components/schemas/UserInfo'

    # Información del usuario autenticado o registrado (detalles)
    UserInfo:
      type: object
      properties:
        id:
          type: string
          example: 'user123'
        email:
          type: string
          format: email
          example: user@example.com
        firstName:
          type: string
          example: Juan
        lastName:
          type: string
          example: Pérez
        phone:
          type: string
          example: '+34612345678'
        accountType:
          type: string
          enum: [clinic, vet, owner, admin]
          example: owner

    # Actualización de datos del usuario (request)
    UserUpdateRequest:
      type: object
      required:
        - tipus
      properties:
        tipus:
          type: string
          enum: [name, phone, email, password, others]
          example: name
        firstName:
          type: string
          example: Juan
        lastName:
          type: string
          example: Pérez
        phone:
          type: string
          example: '+34612345678'
        email:
          type: string
          format: email
          example: new.email@example.com

    PetInfo:
      type: object
      properties:
        id:
          type: string
          example: 'pet123'
        name:
          type: string
          example: 'Max'
        type:
          type: string
          enum: [dog, cat, rodent, other]
          example: dog
        breed:
          type: string
          example: 'Golden Retriever'
        age:
          type: number
          format: float
          example: 3.5
        weight:
          type: number
          format: float
          example: 25.3
        ownerId:
          type: string
          example: 'user123'
        photoUrls:
          type: array
          items:
            type: string
            format: uri
            example: 'https://storage.mypetcare.com/photos/pet123_1.jpg'
        createdAt:
          type: string
          format: date-time
          example: '2024-05-10T09:15:00Z'
        lastUpdated:
          type: string
          format: date-time
          example: '2025-03-15T11:30:00Z'

    PetUpdateRequest:
      type: object
      properties:
        name:
          type: string
          example: 'Max'
        type:
          type: string
          enum: [dog, cat, rodent, other]
          example: dog
        breed:
          type: string
          example: 'Golden Retriever'
        age:
          type: number
          format: float
          example: 3.5
        weight:
          type: number
          format: float
          example: 25.3
        photoUrls:
          type: array
          items:
            type: string
            format: uri
            example: 'https://storage.mypetcare.com/photos/pet123_1.jpg'

    AppointmentInfo:
      type: object
      properties:
        id:
          type: string
          example: 'appointment123'
        petId:
          type: string
          example: 'pet123'
        vetId:
          type: string
          example: 'vet123'
        clinicId:
          type: string
          example: 'clinic123'
        date:
          type: string
          format: date
          example: '2025-04-15'
        time:
          type: string
          example: '14:30'
        reason:
          type: string
          example: 'Revisión anual'
        status:
          type: string
          enum: [scheduled, cancelled, completed]
          example: scheduled
        notes:
          type: string
          example: 'Traer cartilla de vacunación'
        createdAt:
          type: string
          format: date-time
          example: '2025-03-20T10:15:00Z'
        updatedAt:
          type: string
          format: date-time
          example: '2025-03-22T16:45:00Z'

    AppointmentUpdateRequest:
      type: object
      required:
        - date
        - time
      properties:
        date:
          type: string
          format: date
          example: '2025-04-20'
        time:
          type: string
          example: '16:30'
        reason:
          type: string
          example: 'Revisión anual y vacunación'
        notes:
          type: string
          example: 'Traer cartilla de vacunación'

    BlockRequest:
      type: object
      required:
        - month
        - year
      properties:
        day:
          type: string
          pattern: '^(0[1-9]|1[0-3])$'
          example: '16'
        month:
          type: string
          pattern: '^(0[1-9]|1[0-1])$'
          example: '07'
        year:
          type: integer
          minimum: 2024
          example: 2033
        clinicId:
          type: string
          example: 'Hola'
        vetId:
          type: string
          example: '154865dwsdxws'
        especialization:
          type: string
          example: 'general'
        reason:
          type: string
          example: 'Baja temporal'

    ClinicInfo:
      type: object
      properties:
        id:
          type: string
          example: 'clinic123'
        name:
          type: string
          example: 'Clínica Veterinaria San Martín'
        address:
          type: string
          example: 'Calle Mayor 123, Madrid'
        phone:
          type: string
          example: '+34912345678'
        email:
          type: string
          format: email
          example: 'info@clinicavetmadrid.com'
        website:
          type: string
          format: uri
          example: 'https://www.clinicavetmadrid.com'
        coordinates:
          type: object
          properties:
            latitude:
              type: number
              format: float
              example: 40.4168
            longitude:
              type: number
              format: float
              example: -3.7038
        openingHours:
          type: array
          items:
            type: object
            properties:
              schhedule:
                type: ScheduleInfo
              closed:
                type: boolean
                example: false
        services:
          type: array
          items:
            categoryInfo:
              $ref: '#/components/schemas/CategoryInfo'
    ScheduleInfo:
      type: object
      properties:
        day:
          type: string
          enum: [monday, tuesday, wednesday, thursday, friday, saturday, sunday]
          example: monday
        open:
          type: string
          example: '09:00'
        close:
          type: string
          example: '20:00'
    CategoryInfo:
      type: object
      properties:
        id:
          type: string
          example: 'category123'
        name:
          type: string
          example: 'Dermatología'
        description:
          type: string
          example: 'Servicio especializado en problemas dermatológicos de mascotas'

    VetInfo:
      type: object
      properties:
        id:
          type: string
          example: 'vet123'
        firstName:
          type: string
          example: 'Ana'
        lastName:
          type: string
          example: 'García'
        specialties:
          type: array
          items:
            type: string
            example: 'Dermatología'
        photoUrl:
          type: string
          format: uri
          example: 'https://storage.mypetcare.com/vets/vet123.jpg'
        clinicId:
          type: string
          example: 'clinic123'
        biography:
          type: string
          example: 'Licenciada en Veterinaria por la Universidad Complutense de Madrid con 10 años de experiencia'
        workingHours:
          type: array
          items:
            type: object
            properties:
              day:
                type: string
                enum: [monday, tuesday, wednesday, thursday, friday, saturday, sunday]
                example: monday
              start:
                type: string
                example: '09:00'
              end:
                type: string
                example: '17:00'

  securitySchemes:
    petstore_auth:
      type: apiKey
      name: OAuth_Token
      in: header
